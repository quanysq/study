# 2022-10-24
***事件***
	
	专项巡查
	
***问题***

	1. .NET Core 项目引用 .NET Standard 类库项目
		项目 - 依赖项 - 右键 - 添加项目引用
	2. C# 本地方法
		https://www.cnblogs.com/ylvict/p/5579350.html
	3. C# null合并赋值
		?? and ??= (C# 8.0)
		https://blog.csdn.net/weixin_45129218/article/details/115726143
	4. C# 源代码生成器
		就是根据之前的代码预判即将输入代码，C#9.0推出的功能
		https://blog.csdn.net/zls365365/article/details/125755366
	5. sqlserver 将数据库设为单用户模式之后，查询出错：
		此时无法更改数据库 'JinggaiProduction' 的状态或选项。此数据库处于单用户模式, 当前某个用户已与其连接。
		解决步骤：
		1. 在 master 库上新建查询页面
		2. 运行查询语句
			```
			select spid from sysprocesses where dbid=db_id('JinggaiProduction')
			```
		3. 杀掉 spid 
			```
			KILL {spid}, 如 KILL 53
			```
		4. 将数据库设为多用户模式
			```
			ALTER DATABASE JinggaiProduction SET MULTI_USER WITH NO_WAIT;
			```
			
		Link: https://blog.csdn.net/weixin_30443731/article/details/97587349
	6. sqlserver 还原时出错，提示：因为数据库正在使用，所以无法获得对数据库的独占访问权
		右键点击数据库 -> 属性 -> 选项 -> 状态 -> 限制访问 -> 选择Single-> 确定。然后还原。
		Link: http://www.kaotop.com/it/169888.html
	7. ef core add-migration 提示 Build failed.
		原因：
		1. 项目删掉 Program.cs 代码，编译失败，重新加上代码，编译成功即可
		2. 解决方案中有一个项目编译失败
		https://www.cnblogs.com/wcoolly/p/13371804.html
	8. ef core add-migration AddArticleTable 生成的 20221111063618_AddArticleTable 没有内容
		原因: DbContext 没有新增内容
	9. ef core add-migration AddArticleTable 报错：
		Could not load assembly '普通的一对多配置1'. Ensure it is referenced by the startup project '第一个EFCore项目'.
		原因：项目 普通的一对多配置1 不是启动项目
	10. ef core add-migration AddArticleTable 报错：
		System.ArgumentException: The string argument 'name' cannot be empty.
		原因：有一个表配置时忘记了给表名 builder.ToTable("");
	11. sqlserver 聚合不应出现在 UPDATE 语句的集合列表中
		修改语句中不能出现聚合函数这一类
		解决：
		https://blog.csdn.net/weixin_30384217/article/details/97130346
	12. EF 达到了表达式服务限制。请在您的查询中查找潜在的复杂表达式，并尝试简化它们
		EF Contains 包含的值太多
		解决：先不要在数据库层用Contains并 ToList 将数据查出来再 Contains
		https://blog.csdn.net/qq_44965678/article/details/122240247
	13. c# EF报错：非静态方法需要一个目标	
		因为 Linq 条件有 null 值导致的
		https://blog.csdn.net/u010690818/article/details/86645017
		
***心得***	
	1. sqlserver 还原数据库与还原为新数据库的区别
		还原数据库：
			右键【需要还原的数据库】->【任务】->【还原】->【数据库】
			Link: https://blog.csdn.net/qq_35139974/article/details/118304576
		还原为新数据库：
			右键【数据库】->【还原文件和文件组(E)...】
			Link: https://www.jb51.net/article/240952.htm
	2. c# Task.FromResult
		https://www.cnblogs.com/zaijianba/p/11442400.html
	3. c# Task.CompletedTask
		https://blog.csdn.net/xu2034029667/article/details/111768120
	4. c# Task.WhenAll
		同时等待几个 Task
	5. c# await Task.Delay
		异步暂停，（不要用Thread.Sleep，因为它会阻塞调用线程，要使用await Task.Delay）
	6. c# yield
		yield 可以把每一步的计算都推迟到程序实际需要的时候再执行，也就是说不用等所有结果都运行完才执行后续代码
		好处是可以尽可能即时地给用户响应，和提高内存使用效率
		https://blog.csdn.net/gangzhucoll/article/details/121569805
	7. sqlserver 查找自定义函数被谁引用
		右键自定义函数 - 选择查看依赖关系
	8. sqlserver 修改字段描述
		【记录代码】
		EXEC sp_updateextendedproperty ......
		https://blog.csdn.net/qq_34357018/article/details/112182951
	9. sqlserver 计算某个字段中用分隔符分割的字符的个数	
		【记录代码】
		```
		select LEN('a,b,c')-LEN(REPLACE('a,b,c','|',''))+1
		```
		https://www.gxlcms.com/sql_question-393580.html
	10. sqlserver 多个 NOT EXISTS
		【记录代码】
		```
		SELECT a.District,
			COUNT(CASE WHEN a.Urgencylevel=1 THEN 1 ELSE NULL END) FaultNum1,
			COUNT(CASE WHEN a.Urgencylevel=2 THEN 1 ELSE NULL END) FaultNum2,
			COUNT(CASE WHEN a.Urgencylevel=3 THEN 1 ELSE NULL END) FaultNum3
		FROM dbo.V_WellCoverAllInfo a
		WHERE a.FaultGuid IS NOT NULL
			AND a.City='广州市'
			AND ''<>ISNULL(a.District,'')
			AND NOT EXISTS (SELECT 1 FROM dbo.ZhengGaiDetail b WHERE b.FaultItemGuid=a.FaultGuid)
			AND NOT EXISTS (SELECT 1 FROM #table_TempToNextDetail c WHERE c.ItemGuid=a.FaultGuid)
		GROUP BY a.District;
		```
	11. c# FormattableString
		表示复合格式字符串和要设置格式的自变量。
		可用于获取和转换
		https://blog.csdn.net/gangzhucoll/article/details/104713390
	12. c# VS IDE LocalDB 新建数据库和表
		在表设计器的左上角，选择 "更新"，选择 "更新数据库"
		https://blog.csdn.net/bjxiejihua/article/details/107909233
		http://t.zoukankan.com/lucky-donkey-p-13946290.html
		https://blog.csdn.net/cytcytcytcytcyt/article/details/124118825
	13. git 回滚到某个版本修改，然后再回滚回来 步骤
		1. 项目右键 - TortoiseGit - Show Log - SHA-1(即 Commit ID) 【推荐】
			（or）git cmd - run git log - 找到目标 commit id
		2. git reset --hard <commit id>，如：
			git reset --hard fb5f7b02d810c3358d3681e6c88f7598618482c5
		3. git checkout -b <新分支名>，如：
			git checkout -b pro/team/dev/newpermission
		4. 修改后保存
		5. git checkout 切换回原分支
		6. git reset --hard <commit id> 返回原先的版本，如：
			git reset --hard a42c919fb003fddad4dbcd49f066768c19dbbc30
	14. sqlserver 删除表及删除表中数据的方法
		delete or truncate
		truncate table <表名>
		http://www.gimoo.net/t/1803/5aa2640965236.html
	15. sqlserver 窗口函数 分组
		partition by
		https://www.jianshu.com/p/aea57473191a
	16. HR SaaS
		https://zhuanlan.zhihu.com/p/377662346
	17. sqlserver 将字符串转换为 in (字符串格式)
		a,b,c -> 'a','b','c'
		SELECT ''''+REPLACE('a,b,c',',',''',''')+'''';
		单引号用2个引号代替
		http://t.zoukankan.com/cnaspnet-p-2002903.html
	18. sqlserver 分页
		【记录代码】
		```
		SELECT * 
		FROM dbo.WellCoverMainInfo a
		ORDER BY a.ItemID DESC
		OFFSET (2-1)*10 ROW FETCH NEXT 10 ROW ONLY;
		--OFFSET (当前页数-1)*每页数据条数 ROW FETCH NEXT 每页数据条数 ROW ONLY
		```
		https://www.cnblogs.com/cplvfx/articles/14205768.html
	19. sqlserver 时间转换
		【记录代码】
		```
		SELECT GETDATE() NowTime,  --2022-11-23 14:38:24.420
			CONVERT(VARCHAR(25),GETDATE(),20) NowTimeStr1, --2022-11-23 14:38:24
			CONVERT(VARCHAR(10),GETDATE(), 21) NowTimeStr2 --2022-11-23
		```
	20. Windows 进入和退出 linux 子系统
		进入：CMD 运行 bash 命令
		退出：运行 exit 命令
		https://blog.csdn.net/liouwb/article/details/109028515
	21. linux子系统文件在哪
		https://jingyan.baidu.com/article/d8072ac4718e74ad95cefdaa.html
		[注]我本地机没有 rootfs 这个目录，不知是否升级为 wsl2 的原因
	22. Linux查看目录命令
		ls：查看当前目录信息
		tree：以树状方式显示目录信息
		https://blog.csdn.net/weixin_57003452/article/details/121160160
	24. Linux子系统中查看Windows目录
		```
		cd /mnt
		ll -a --即可看到本地盘符
		cd c
		ls
		```
		https://blog.csdn.net/weixue9/article/details/125443406
		https://blog.csdn.net/qq_34159047/article/details/121973652
	25. Windows10内置Linux子系统（WSL）迁移目录
		https://www.cnblogs.com/RainFate/p/16771574.html
	26. sqlserver int 转 decimal
		【记录代码】
		```
		DECLARE @Total DECIMAL(8,2);
		SET @Total=17*1.0;
		```
	27. sqlserver 保留2位小数点
		```
		Convert(decimal(18,2), 3.1245)
		```
		https://www.cnblogs.com/wangcq/p/4938547.html
	28. docker 怎么退出 yarn dev 环境？
		Ctrl + C
		https://blog.csdn.net/qq_53810245/article/details/121007677
	29. sqlserver float 转 Int，并去掉小数点
		【记录代码】
		```
		SELECT CAST(0.96*100 AS int)
		```
	30. html声明charset="utf-8"后，浏览器访问中文依旧乱码
		https://blog.csdn.net/weixin_50464560/article/details/119277472
	31. sqlserver 查询具体某一天的数据
		【记录代码】
		```
		...... Where DateDiff(dd,'2022-9-23',a.SystemDate)=0
		```
		http://t.zoukankan.com/fumj-p-3672755.html
	32. 查询出来的列表数据同时其它用途如下载等，如果设计？
		在数据库增加一临时表，用于缓存列表数据（不用所有字段，只要主键字段就够），
		每次查询列表时同时把数据缓存在这个临时表，
		缓存前先把数据清空
	33. c# SqlSugar List 批量快速存入数据库在数据库增加一临时表
		sqlSugarClient.Insertable(List<TempDataCenter>).ExecuteCommand();
		TempDataCenter是数据表实体类
		https://www.donet5.com/home/Doc?typeId=1193
	34. c# SqlSugar 批量删除数据表
		sqlSugarClient.Deleteable<TempDataCenter>().ExecuteCommand();
		或者执行SQL语句
		https://www.donet5.com/home/Doc?typeId=1195
	35. asp.net core IOptionsSnapshot
		IOptionsSnapshot 通过注册为一个作用域内的单例模式，来保证当配置发生变化时，下一个请求可以获取到最新的配置
		https://blog.csdn.net/sD7O95O/article/details/78096175
	36. asp.net web api httppost frombody string 参数在 postman 如何传参？
		Body - raw - Json 格式 - 直接输入字符串如 "1,2"
		https://www.cnblogs.com/microestc/p/11003233.html
	37. ASP.NET Core 使用redis
		https://blog.csdn.net/weixin_46178278/article/details/125593153
	38. sqlserver 存储过程表值参数
		1. 用于代码中直接传送list结构数据
		2. sqlserver 需要创建一个跟 List 相同结构的 Type (注意：这里会产生比较深的耦合)
		3. 代码中list参数类型用 SqlDbType.Structured
		4. 总结：代码传类似1,2,3结构的字符串，sqlserve创建一个类似 split 的函数进行字符串进行解析转成table比较方便
		5. 参考：https://www.cnblogs.com/qingiqng99/archive/2012/02/28/2370984.html
	39. c# TransactionScope 事务 MSDTC
		https://blog.csdn.net/weixin_45756851/article/details/126466392
		https://www.cnblogs.com/nlh774/p/3434050.html
	40. Asp.net B/S模式下使用Console.Write()
		https://www.cnblogs.com/blogshow/archive/2012/07/22/2603808.html
	41. c# Environment.TickCount64
		自系统启动以来的毫秒数
	42. asp.net core webapi 中间件获取请求的 Body
		【记录代码】
		```
		var reqStream = context.Request.BodyReader.AsStream();
        var jsonObj = JsonSerializer.Deserialize<CheckAndParsingMiddlewareModel>(reqStream);

		[OR]
		Stream reqStream = context.Request.Body;
		byte[] buffer = new byte[context.Request.ContentLength!.Value];
		await reqStream.ReadAsync(buffer, 0, buffer.Length);
		var reqStr = Encoding.UTF8.GetString(buffer);
		var jsonObj = JsonSerializer.Deserialize<CheckAndParsingMiddlewareModel>(reqStr)!;

		说明：
		1. 以前两种写法都可以，第一种更简洁，第二种是先转成字符串
		2. JsonSerializer.Deserialize 不支持序列化为 dynamic 类型，需要创建一个实体类
		```
		https://blog.csdn.net/xyx_0300/article/details/121560872
		https://www.cnblogs.com/tchivs/p/12167949.html
	43. c# PathString
		使用给定值初始化路径字符串，必须采用未转义格式。
		就是普通的string,但有自己的一系列方法和属性
	44. .net core 类库项目如何使用 Microsoft.AspNetCore.App 框架？
		在 csproj 文件添加：
		```
		<Project Sdk="Microsoft.NET.Sdk">
			......
			<ItemGroup>
				<FrameworkReference Include="Microsoft.AspNetCore.App" />
			</ItemGroup>
		</Project>
		```
	45. c# 读取文本文件编码 Nuget 包
		Ude.NetStandard
		```
		/// <summary>
		/// 检测流的编码
		/// </summary>
		/// <param name="stream"></param>
		/// <returns></returns>
		private static string DetectCharset(Stream stream)
		{
			CharsetDetector charDetector = new();
			charDetector.Feed(stream);
			charDetector.DataEnd();
			string charset = charDetector.Charset ?? "UTF-8";
			stream.Position = 0;
			return charset;
		}		
		```
	46. c# MarkDown to Html 转换器 Nuget 包
		MarkdownSharp
	47. 
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	