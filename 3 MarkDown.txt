Asp.Net Core 【未上传，未完成】
# 代码 & 步骤
1. 创建入门级 asp.net core 项目
	1. 创建 Web 应用项目
		1. 创建目录 D:\Work\study\TestProject_VS2022\NetCore
		2. 打开 CMD 
		3. 进行以上目录
		4. 运行以下命令创建一个 mvc core 项目
			```
			D:\Work\study\TestProject_VS2022\NetCore>dotnet new webapp -o aspnetcoreapp
			
			说明：
			1. dotnet new 根据指定的模板，创建新的项目、配置文件或解决方案
			2. webapp: ASP.NET Core Web 应用程序
			3. -o aspnetcoreapp 用于放置生成的输出的位置。 默认为当前目录。
			
			参考：
			https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new
			```
	2. 信任开发证书，CMD 运行以下命令
		```
		D:\Work\study\TestProject_VS2022\NetCore>dotnet dev-certs https --trust
		
		说明：
		1. dotnet dev-certs：生成自签名证书，以便在开发中使用 HTTPS。
		2. https：唯一命令
		3. --trust：信任本地计算机上的证书。如果未指定此选项，则会将证书添加到证书存储中，但不会添加到受信任的列表中。
		
		参考：
		https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-dev-certs
		```
	3. 运行应用，运行以下命令
		```
		cd aspnetcoreapp
		dotnet watch run
		
		说明：
		1. dotnet watch：在检测到源代码中的更改时重启或热重载指定的应用程序。
		2. run：无需任何显式编译或启动命令即可运行源代码
		
		参考：
		https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-watch
		https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-run
		```
	4. 保持 watch run 的状态，修改内容，刷新即可显示
	5. 按 Ctrl + C 停止 dotnet watch run
2. 创建 ASP.NET Core Razor Pages 项目
	- Razor Pages 是一个基于页面的模型
	- UI 和业务逻辑关注点保持分离状态，但都在页面内
	- 入门比 ASP.NET Core MVC 要简单一些
	- 使用 Razor Pages 创建项目（VS2022）
		1. 选择 VS2022 - 创建新项目 - ASP.NET Core Web 应用
		2. 在“配置新项目”对话框中，输入项目名称、解决方案名称和存储位置，其它默认
		3. 在“其他信息”对话框中，选择“.NET 6.0 (长期支持)”，其它默认，然后选择“创建”，即可创建一个 ASP.NET Core Razor Pages 项目
		4. 运行项目（Ctrl+F5，不使用调试程序）
			- 如果尚未将项目配置为使用 SSL，VS2022 将旨意信任 ASP.NET Core SSL Certificate 提示，选择 是
		5. 项目文件：
			- Pages 文件夹：
				- 包含 Razor 页面和支持文件
				- 每个 Razor 页面都是一对文件
					- 一个 .cshtml 文件，其中包含使用 Razor 语法的 C# 代码的 HTML 标记。（类似于 .aspx）
					- 一个 .cshtml.cs 文件，其中包含处理页面事件的 C# 代码（类似于 .aspx.cs）
				- 支持文件的名称以下划线开头
			- wwwroot 文件夹
				包含静态资产，如 HTML 文件、JavaScript 文件和 CSS 文件
			- appsettings.json
				包含配置数据，如连接字符串
			- Program.cs
				相当于 Startup.cs，在这里向依赖项注入 (DI) 容器添加 Razor Pages 支持和其它中间件，比如路由、授权等等
	- 向 Razor Pages 项目添加模型
		1. 手动创建 POCO 类
			- 所谓的 POCO 类就是模型类，也就是平时所说的实体类，它对 EF Core 没有任何依赖性，只是定义数据库中存储的数据属性
			- 创建 POCO 类，跟 EF6 相同，可参考之前的记录
			- Net6.0 可以定义 string? 类型，表示属性可为空
		2. 打开菜单 "工具 - NuGet 包管理器 - 管理解决方案的 NuGet 包" 
		3. 找到 Microsoft.EntityFrameworkCore.Design 包，选中“项目”，然后选择“安装”
			- 在“许可证接受”对话框中，选择“我接受” 
		4. 右键单击 Pages 文件夹 >“添加”>“新建文件夹”，新建 Movies 文件夹
		5. 右键单击 Movies 文件夹 >“添加”>“已搭建基架的新项”
		6. 在“添加新基架”对话框中，依次选择“使用实体框架的 Razor Pages (CRUD)”>“添加”
		7. 完成“添加使用实体框架的 Razor 页面 (CRUD)”对话框
		8. 在“模型类”下拉列表中，选择“Movie (RazorPagesMovie.Models)” 
		9. 在“数据上下文类”行中，选择 +（加号）
			- 在“添加数据上下文”对话框中，生成类名 RazorPagesMovie.Data.RazorPagesMovieContext。
			- 选择 添加
		10. 其它默认，点击 添加 按钮
			- 如果收到错误消息，提示需要安装 Microsoft.EntityFrameworkCore.SqlServer 包，重复从“添加”>“已搭建基架的新项”开始的步骤
		11. 创建和更新的文件
			- 在 .csproj 项目文件中插入所需的包引用
			- 在 Pages/Movies 下创建 CRUD 页面和代码
			- 创建数据库上下文类 Data/RazorPagesMovieContext.cs
			- 将数据库连接字符串添加到 appsettings.json 文件
			- 在 Program.cs 文件中注册数据库上下文
				```
				builder.Services.AddDbContext<RazorPagesMovieContext>(options =>
					options.UseSqlServer(builder.Configuration.GetConnectionString("RazorPagesMovieContext") ?? throw new InvalidOperationException("Connection string 'RazorPagesMovieContext' not found.")));
				```
		12. 使用 EF Core 迁移功能来创建数据库，运行命令：
			1. Add-Migration InitialCreate
				- InitialCreate 参数是迁移名称。 可以使用任何名称，但是按照惯例，会选择可说明迁移的名称
			2. Update-Database
		13. 运行
			- 如果收到 SqlException 错误，可能是因为遗漏了迁移步骤
	- Razor Pages 特征代码
		- Razor 页面派生自 PageModel。 按照约定，PageModel 派生的类称为 PageNameModel。 例如 IndexModel
		- 使用依赖注入在构造函数中注入数据库上下文类 RazorPagesMovieContext 
			```
			public class IndexModel : PageModel
			{
					private readonly RazorPagesMovie.Data.RazorPagesMovieContext _context;

					public IndexModel(RazorPagesMovie.Data.RazorPagesMovieContext context)
					{
						_context = context;
					}
			```
		- OnGetAsync 或 OnGet 在 Razor 页面上调用，以初始化该页面的状态
			- 当 OnGet 返回 void 或 OnGetAsync 返回 Task 时，不使用任何返回语句
			- 当返回类型是 IActionResult 或 Task<IActionResult> 时，必须提供返回语句
		- @page 指令
			- @pageRazor 指令将文件转换为一个 MVC 操作，这意味着它可以处理请求。
			- @page 必须是页面上的第一个 Razor 指令
		- @model 指令
			- @model 指令指定传递到 Razor 页面的模型类型
			- 使用同 MVC
		- [BindProperty] 特性
			- 属性使用 [BindProperty] 特性来选择加入模型绑定
				```
				[BindProperty]
				public Movie Movie { get; set; } = default!;
				```
			- 当发布表单值时，ASP.NET Core 运行时将发布的值绑定到 Movie 模型。
			- 非 POCO 类的属性加上[BindProperty]，会绑定属性相同名称的表单的值
			- 在 HTTP GET 请求中进行绑定需要 [BindProperty(SupportsGet = true)]。
		- 标记帮助程序
			- 表单标记帮助程序 <form method="post">
				表单标记帮助程序会自动包含防伪令牌
			- 验证标记帮助程序（<div asp-validation-summary 和 <span asp-validation-for）
				显示验证错误
			- 标签标记帮助程序 <label asp-for="Movie.Title" class="control-label"></label>
				生成标签描述和 Title 属性的 [for] 特性。
			- 输入标记帮助程序 <input asp-for="Movie.Title" class="form-control" />
				使用 DataAnnotations 属性并在客户端生成 jQuery 验证所需的 HTML 属性。
			- 定位标记帮助程序 <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a>
				- 从 相对路由(asp-page) 和路由标识符(asp-route-id) 动态生成 HTML href 特性值
					<a href="/Movies/Edit?id=1">Edit</a>
				- 使用 {id:int} 路由模板 @page "{id:int}" 可以将生成的 href 改为：
					<a href="/Movies/Edit/1">Edit</a>
					- @page "{id:int?}" 可以允许 id 为空
		- SQL Server Express LocalDB
			- 轻型版的 SQL Server Express 数据库引擎，以程序开发为目标
			- 按需启动并在用户模式下运行的轻量级数据库没有复杂的配置
			- 默认情况下，LocalDB 数据库在 C:\Users\<user>\ 目录下创建 *.mdf 文件
			- 从 菜单 "视图 - SQL Server 对象资源管理器" 打开数据库
		- 设定数据库种子，用于初始化数据
			1. 在 Models 文件夹中创建一个名为 SeedData 的类
			2. 在 Program.cs 运行 SeedData 类
				```
				using (var scope = app.Services.CreateScope())
				{
					var services = scope.ServiceProvider;

					SeedData.Initialize(services);
				}
				
				1. 调用 seedData.Initialize 方法，并向其传递数据库上下文实例。
				2. Seed 方法完成时释放上下文。 using 语句将确保释放上下文
				```
		- 捕捉和处理并发冲突 
			catch (DbUpdateConcurrencyException)
		- 数据注解同 Mvc
		- 使用 EF Code First 自动创建和跟踪数据库时，Code First 将：
			- 向数据库添加 __EFMigrationsHistory 表格，以跟踪数据库的架构是否与从生成它的模型类同步
			- 如果该模型类未与数据库同步，则会引发异常
				- 可通过几种方法解决此错误：
					- 让 Entity Framework 自动丢弃并使用新的模型类架构重新创建数据库。
						- 此方法在开发周期早期很方便，开发人员可通过它一起快速改进模型和数据库架构。
						- 缺点是数据库中的现有数据会丢失。
						- 请勿对生产数据库使用此方法！
					- 手动或通过创建数据库更改脚本对数据库架构进行显式修改，使它与模型类相匹配
						- 优点是可以保留数据
					- 使用 Code First 迁移更新数据库架构 
						- add-migration xxx
							- 将 Movie 模型与 Movie 数据库架构进行比较
							- 创建代码以将数据库架构迁移到新模型
						- update-database
			- 自动验证架构与模型是否同步可以更容易地发现不一致的数据库代码问题
		- 添加验证
			1. POCO 类添加验证特性如 [Required] 等
			2. 应用数据注释后，即表示已启用验证 UI
			3. 服务器端验证使用 ModelState.IsValid 
			4. 迁移应用新的模型类
3. 创建 ASP.NET Core MVC 项目
	- 创建项目（VS2022）
	- 添加模型
		1. 菜单 "工具 - NuGet 包管理器 - 包管理器控制台(PMC)" 添加 EF Core 包
			```
			Install-Package Microsoft.EntityFrameworkCore.Design
			Install-Package Microsoft.EntityFrameworkCore.SqlServer
			```
		2. 为 POCO 类生成 CRUD 页
			1. 右键单击 Controllers 文件夹，并选择“添加”>“新搭建基架的项目”
			2. 在“添加基架”对话框中，选择“包含视图的 MVC 控制器(使用实体框架)”>“添加”。
			3. 在“模型类”下拉列表中，选择“Movie (MvcMovie.Models)”。
			4. 在“数据上下文类”行中，选择 +（加号）
				- 在“添加数据上下文”对话框中，将生成类名 MvcMovie.Data.MvcMovieContext。
				- 选择 添加 
			5. 其它默认，点击 添加 按钮
				- 如果收到错误消息，请再次选择“添加”以重试
			6. 更新和创建以下内容
				- 在 .csproj 项目文件中插入所需的包引用
				- 在 Program.cs 文件中注册数据库上下文
				- 将数据库连接字符串添加到 appsettings.json 文件
				- 创建 Controller 文件
				- 创建 CRUD 页面和代码
				- 创建数据库上下文类
			7. 使用 EF Core 迁移功能来创建数据库
				- 迁移是可用于创建和更新数据库以匹配数据模型的一组工具
				- 和 EF6.x 一样，主要命令是：add-migration 和 update-database
				- 运行命令：
					1. Add-Migration InitialCreate
						- InitialCreate 参数是迁移名称。 可以使用任何名称，但是按照惯例，会选择可说明迁移的名称
						- 因为这是首次迁移，所以生成的类包含用于创建数据库架构的代码
						- 数据库架构基于在 MvcMovieContext 类中指定的模型
					2. Update-Database
						- 将数据库更新到上一个命令创建的最新迁移
			8. 运行
				- 如果收到 SqlException 错误，可能是因为遗漏了迁移步骤
		3. 数据库上下文类
			- 对于 EF Core，使用模型执行数据访问
			- 模型由实体类和表示数据库会话的上下文对象构成
			- 上下文对象允许查询并保存数据
			- 数据库上下文派生自 Microsoft.EntityFrameworkCore.DbContext 并指定要包含在数据模型中的实体
			- DbSet<Movie> 属性表示数据库的 Movie 表
		4. 注册
			- ASP.NET Core 通过依赖关系注入 (DI) 生成
			- 服务（如数据库上下文）在 Program.cs 中向 DI 注册
				```
				
				```





# 问题	
1. 运行所选代码生成器出错，请安装包 Microsoft.VisualStudio.Web.CodeGeneration.Design，然后重试
	解决：打开 NuGet 包管理器>管理解决方案的 NuGet 包，看到 Microsoft.VisualStudio.Web.CodeGeneration.Design 已经安装，按原步骤重试问题不再显示
2. 此文件中的某些unicode字符未能保存到当前代码页中
	解决：选择 是
3. 在其它电脑运行 asp.net core 项目，错误：
	SqlException: Invalid object name 'Movie'.
	解决：数据库不存在，update-database 创建更新数据库，然后关掉visual studio重启
4. SqlException: Cannot open database "RazorPagesMovieContext-" requested by the login. The login failed. Login failed for user 'user name'
	解决：先运行 update-database
5. SqlException: Invalid column name 'Rating'.
	原因：SqlException 异常是由于更新的 Movie 模型类与数据库的 Movie 表架构不同导致的。 数据库表中没有 Rating 列。
	解决：运行 add-migration 和 update-database 两个命令
6. 如何删除表所有数据
	解决：context.Database.ExecuteSqlRaw("delete from Movie");
7. asp.net core mvc 生成代码出错，提示方法语句有二义性	
	解决：原步骤重新生成
	
# 代码
	- Link: https://github.com/quanysq/study/tree/master/TestProject_VS2022/WebApiSample/EFCodeFirstExample	

# 参考
1. 教程：ASP.NET Core 入门
	https://docs.microsoft.com/zh-cn/aspnet/core/getting-started/?view=aspnetcore-7.0&tabs=windows
2. .NET Core 命令
	https://docs.microsoft.com/zh-cn/dotnet/core/tools/
3. ASP.NET Core 中的配置
	https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0
4. ASP.NET Core 的 Razor 语法参考
	https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/razor?view=aspnetcore-7.0#razor-syntax
5. ASP.NET Core 中的标记帮助程序
	https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/tag-helpers/intro?view=aspnetcore-7.0
6. 使用 ASP.NET Core 创建 Razor Pages Web 应用 系列教程
	https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/razor-pages/?view=aspnetcore-7.0

