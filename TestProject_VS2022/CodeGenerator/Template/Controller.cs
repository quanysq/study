// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 17.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class Controller : ControllerBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using Ando.ERP.BLL.IService;
using Ando.ERP.BLL.Model;
using Ando.ERP.BLL.Model.ViewModels;
using Ando.ERP.Logger;
using Ando.ERP.Message;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace Ando.ERP.Client.Mvc.Controllers
{
    /// <summary>
    /// ");
            
            #line 21 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\r\n    /// </summary>\r\n    public class ");
            
            #line 23 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller : Controller\r\n    {\r\n        private I");
            
            #line 25 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TableName));
            
            #line default
            #line hidden
            this.Write("Service ");
            
            #line 25 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service;\r\n\r\n        /// <summary>\r\n        /// Autofac 通过构造方法参数注入 \r\n        /// I" +
                    "");
            
            #line 29 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TableName));
            
            #line default
            #line hidden
            this.Write("Service\r\n        /// 并实例化\r\n        /// </summary>\r\n        /// <param name=\"");
            
            #line 32 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service\"></param>\r\n        public ");
            
            #line 33 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller(I");
            
            #line 33 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TableName));
            
            #line default
            #line hidden
            this.Write("Service ");
            
            #line 33 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service)\r\n        {\r\n            this.");
            
            #line 35 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service = ");
            
            #line 35 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service;\r\n        }\r\n\r\n        /// <summary>\r\n        /// 数据列表 UI\r\n        /// </" +
                    "summary>\r\n        /// <returns></returns>\r\n        public ActionResult Index()\r\n" +
                    "        {\r\n            return View();\r\n        }\r\n\r\n        /// <summary>\r\n     " +
                    "   /// 获取");
            
            #line 48 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write(@"列表数据
        /// </summary>
        /// <param name=""QueryPageParams""></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult GetList(QueryPageParams queryPageParams)
        {
            try
            {
                var list = ");
            
            #line 57 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write(@"Service.QueryPageList(queryPageParams, out int total);
                return Json(new { code = 1, totalNum = total, data = list, msg = """" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                AndoErpLogger.WEBLOG.Error(string.Format(ErrorMessage.ErrorMsgOfGetDataList, ""menu"", """);
            
            #line 62 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller\"), ex);\r\n                return Json(new { code = 0, totalNum = 0, dat" +
                    "a = \"\", msg = string.Format(ErrorMessage.ErrorMsgOfGetDataListCN, \"");
            
            #line 63 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") }, JsonRequestBehavior.AllowGet);\r\n            }\r\n        }\r\n\r\n        /// <su" +
                    "mmary>\r\n        /// 添加");
            
            #line 68 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("数据\r\n        /// </summary>\r\n        /// <param name=\"");
            
            #line 70 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel\"></param>\r\n        /// <returns></returns>\r\n        [HttpPost]\r\n       " +
                    " public ActionResult Add(");
            
            #line 73 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TableName));
            
            #line default
            #line hidden
            this.Write("ViewModel ");
            
            #line 73 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel)\r\n        {\r\n            try\r\n            {\r\n                ");
            
            #line 77 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service.Add(");
            
            #line 77 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel);\r\n                return Json(new { code = 1, msg = string.Format(Succ" +
                    "essMessage.SuccessMsgOfAddDataCN, \"");
            
            #line 78 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") });\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n         " +
                    "       AndoErpLogger.WEBLOG.Error(string.Format(ErrorMessage.ErrorMsgOfAddData, " +
                    "\"menu\", \"");
            
            #line 82 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller\"), ex);\r\n                return Json(new { code = 0, msg = string.Form" +
                    "at(ErrorMessage.ErrorMsgOfAddDataCN, \"");
            
            #line 83 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") });\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// 编辑");
            
            #line 88 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("数据\r\n        /// </summary>\r\n        /// <param name=\"");
            
            #line 90 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel\"></param>\r\n        /// <returns></returns>\r\n        [HttpPost]\r\n       " +
                    " public ActionResult Edit(");
            
            #line 93 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TableName));
            
            #line default
            #line hidden
            this.Write("ViewModel ");
            
            #line 93 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel)\r\n        {\r\n            try\r\n            {\r\n                ");
            
            #line 97 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service.Update(");
            
            #line 97 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel);\r\n                return Json(new { code = 1, msg = string.Format(Succ" +
                    "essMessage.SuccessMsgOfUpdateDataCN, \"");
            
            #line 98 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") });\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n         " +
                    "       AndoErpLogger.WEBLOG.Error(string.Format(ErrorMessage.ErrorMsgOfUpdateDat" +
                    "a, \"menu\", \"");
            
            #line 102 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller\"), ex);\r\n                return Json(new { code = 0, msg = string.Form" +
                    "at(ErrorMessage.ErrorMsgOfUpdateDataCN, \"");
            
            #line 103 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") });\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// 删除");
            
            #line 108 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("数据\r\n        /// </summary>\r\n        /// <param name=\"");
            
            #line 110 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel\"></param>\r\n        /// <returns></returns>\r\n        [HttpPost]\r\n       " +
                    " public ActionResult Delete(");
            
            #line 113 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TableName));
            
            #line default
            #line hidden
            this.Write("ViewModel ");
            
            #line 113 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel)\r\n        {\r\n            try\r\n            {\r\n                ");
            
            #line 117 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("Service.Delete(");
            
            #line 117 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.TablePara));
            
            #line default
            #line hidden
            this.Write("ViewModel);\r\n                return Json(new { code = 1, msg = string.Format(Succ" +
                    "essMessage.SuccessMsgOfDeleteDataCN, \"");
            
            #line 118 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") });\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n         " +
                    "       AndoErpLogger.WEBLOG.Error(string.Format(ErrorMessage.ErrorMsgOfDeleteDat" +
                    "a, \"menu\", \"");
            
            #line 122 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerName));
            
            #line default
            #line hidden
            this.Write("Controller\"), ex);\r\n                return Json(new { code = 0, msg = string.Form" +
                    "at(ErrorMessage.ErrorMsgOfDeleteDataCN, \"");
            
            #line 123 "D:\Work\study\TestProject_VS2022\CodeGenerator\Template\Controller.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ControllerDesc));
            
            #line default
            #line hidden
            this.Write("\") });\r\n            }\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ControllerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
