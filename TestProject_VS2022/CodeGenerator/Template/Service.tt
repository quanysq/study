<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Ando.ERP.BLL.IService;
using Ando.ERP.BLL.Model;
using Ando.ERP.BLL.Model.ViewModels;
using Ando.ERP.Common.Util;
using Ando.ERP.DAL.Repository;
using Ando.ERP.DAL.Repository.IRepositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Ando.ERP.BLL.Service
{
    /// <summary>
    /// 实现 <#= model.TableName #> <#= model.TableDesc #>表服务层接口
    /// </summary>
    public class <#= model.TableName #>Service : BaseService<<#= model.TableName #>>, I<#= model.TableName #>Service
    {
        private I<#= model.TableName #>Reposition <#= model.TablePara #>Reposition;

        /// <summary>
        /// Autofac 通过构造方法参数注入 
        /// I<#= model.TableName #>Reposition 
        /// 并实例化
        /// </summary>
        /// <param name="<#= model.TablePara #>Reposition"></param>
        public <#= model.TableName #>Service(I<#= model.TableName #>Reposition <#= model.TablePara #>Reposition) : base(<#= model.TablePara #>Reposition)
        {
            this.<#= model.TablePara #>Reposition = <#= model.TablePara #>Reposition;
        }

        public bool Add(<#= model.TableName #>ViewModel <#= model.TablePara #>ViewModel)
        {
            <#= model.TableName #> <#= model.TablePara #> = CommonUtil.TranObject2OtherType<<#= model.TableName #>>(<#= model.TablePara #>ViewModel);
            return Add(<#= model.TablePara #>, false);
        }

        public bool Update(<#= model.TableName #>ViewModel <#= model.TablePara #>ViewModel)
        {
            <#= model.TableName #> <#= model.TablePara #> = CommonUtil.TranObject2OtherType<<#= model.TableName #>>(<#= model.TablePara #>ViewModel);
            return Update(<#= model.TablePara #>, false);
        }

        public bool Delete(<#= model.TableName #>ViewModel <#= model.TablePara #>ViewModel)
        {
            <#= model.TableName #> <#= model.TablePara #> = CommonUtil.TranObject2OtherType<<#= model.TableName #>>(<#= model.TablePara #>ViewModel);
            return Delete(<#= model.TablePara #>, false);
        }

        public List<<#= model.TableName #>ViewModel> QueryPageList(QueryPageParams queryPageParams, out int total)
        {
            /*
            Expression<Func<<#= model.TableName #>, bool>> whereLambda = a => true;
            if (!string.IsNullOrEmpty(queryPageParams.SearchKeyword))
            {
                whereLambda = a => a.COMPHT02 == queryPageParams.SearchKeyword || a.MNUCDHT02 == queryPageParams.SearchKeyword; 
            }
            var list = QueryPageList(queryPageParams.PageIndex, queryPageParams.PageSize, whereLambda, (a => new { a.COMPHT02, a.MNUCDHT02 }), out total, queryPageParams.IsAsc);
            var result = CommonUtil.TranObject2OtherType<List<<#= model.TableName #>ViewModel>>(list);
            return result;
            */
        }
    }
}

